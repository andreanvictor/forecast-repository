# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2020-01-07 18:58
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BinDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_i', models.IntegerField(null=True)),
                ('cat_f', models.FloatField(null=True)),
                ('cat_t', models.TextField(null=True)),
                ('cat_d', models.DateField(null=True)),
                ('prob', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(help_text="file name of the source of this forecast's prediction data")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ForecastModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('abbreviation', models.TextField(help_text="Short name for the model. Used in the 'model' column in downloaded CSV score files.")),
                ('team_name', models.TextField()),
                ('description', models.TextField(help_text='A few paragraphs describing the model. Please see documentation for what should be included here - information on reproducing the modelâ€™s results, etc.')),
                ('home_url', models.URLField(help_text="The model's home site.")),
                ('aux_data_url', models.URLField(blank=True, help_text='Optional model-specific auxiliary data directory or Zip file containing data files (e.g., CSV files) beyond Project.core_data that were used by this model.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NamedDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.IntegerField(choices=[(0, 'Normal'), (1, 'Log Normal'), (2, 'Gamma'), (3, 'Beta'), (4, 'Bernoulli'), (5, 'Binomial'), (6, 'Poisson'), (7, 'Negative Binomial'), (8, 'Negative Binomial 2')])),
                ('param1', models.FloatField(null=True)),
                ('param2', models.FloatField(null=True)),
                ('param3', models.FloatField(null=True)),
                ('forecast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Forecast')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointPrediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_i', models.IntegerField(null=True)),
                ('value_f', models.FloatField(null=True)),
                ('value_t', models.TextField(null=True)),
                ('value_d', models.DateField(null=True)),
                ('forecast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Forecast')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_public', models.BooleanField(default=True, help_text="Controls project visibility. False means the project is private and can only be accessed by the project's owner or any of its model_owners. True means it is publicly accessible.")),
                ('name', models.TextField()),
                ('time_interval_type', models.CharField(choices=[('w', 'Week'), ('b', 'Biweek'), ('m', 'Month')], default='w', help_text='Used when visualizing the x axis label.', max_length=1)),
                ('visualization_y_label', models.TextField(help_text='Used when visualizing the Y axis label.')),
                ('truth_csv_filename', models.TextField(help_text='Name of the truth csv file that was uploaded.')),
                ('description', models.TextField(help_text="A few paragraphs describing the project. Please see documentation forwhat should be included here - 'real-time-ness', time_zeros, etc.")),
                ('home_url', models.URLField(help_text="The project's home site.")),
                ('logo_url', models.URLField(blank=True, help_text="The project's optional logo image.", null=True)),
                ('core_data', models.URLField(help_text='Directory or Zip file containing data files (e.g., CSV files) made made available to everyone in the challenge, including supplemental data like Google queries or weather.')),
            ],
        ),
        migrations.CreateModel(
            name='SampleDistribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_i', models.IntegerField(null=True)),
                ('sample_f', models.FloatField(null=True)),
                ('sample_t', models.TextField(null=True)),
                ('sample_d', models.DateField(null=True)),
                ('prob', models.FloatField()),
                ('forecast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Forecast')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbreviation', models.TextField(help_text="Short name used as a column header for this score in downloaded CSV score files. Also used to look up the Score's calculation function name.")),
                ('name', models.TextField(help_text="The score's name, e.g., 'Absolute Error'.")),
                ('description', models.TextField(help_text='A paragraph describing the score.')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreLastUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScoreValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('forecast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Forecast')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Location')),
                ('score', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='forecast_app.Score')),
            ],
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, 'continuous'), (1, 'discrete'), (2, 'nominal'), (3, 'binary'), (4, 'date'), (5, 'compositional')], help_text="The Target's type. The choices are 'continuous', 'discrete', 'nominal', 'binary', 'date', and 'compositional'.")),
                ('name', models.TextField(help_text='A brief name for the target.')),
                ('description', models.TextField(help_text='A verbose description of what the target is.')),
                ('is_step_ahead', models.BooleanField(help_text='True if the target is one of a sequence of targets that predict values at different points in the future.')),
                ('step_ahead_increment', models.IntegerField(default=None, help_text='An integer, indicating the forecast horizon represented by this target. It is required if `is_step_ahead` is True.', null=True)),
                ('unit', models.TextField(help_text="This target's units, e.g., 'percentage', 'week', 'cases', etc.", null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TargetCat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat_f', models.FloatField(null=True)),
                ('cat_t', models.TextField(null=True)),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cats', to='forecast_app.Target')),
            ],
        ),
        migrations.CreateModel(
            name='TargetDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dates', to='forecast_app.Target')),
            ],
        ),
        migrations.CreateModel(
            name='TargetLwr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lwr', models.FloatField()),
                ('upper', models.FloatField()),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lwrs', to='forecast_app.Target')),
            ],
        ),
        migrations.CreateModel(
            name='TargetRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_i', models.IntegerField(null=True)),
                ('value_f', models.FloatField(null=True)),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ranges', to='forecast_app.Target')),
            ],
        ),
        migrations.CreateModel(
            name='TimeZero',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezero_date', models.DateField(help_text='A date that a target is relative to.')),
                ('data_version_date', models.DateField(blank=True, help_text='The optional database date at which models should work with for the timezero_date.', null=True)),
                ('is_season_start', models.BooleanField(default=False, help_text='True if this TimeZero starts a season.')),
                ('season_name', models.TextField(blank=True, help_text='The name of the season this TimeZero starts, if is_season_start.', max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TruthData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Location')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Target')),
                ('time_zero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecast_app.TimeZero')),
            ],
        ),
        migrations.CreateModel(
            name='UploadFileJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'PENDING'), (1, 'CLOUD_FILE_UPLOADED'), (2, 'QUEUED'), (3, 'CLOUD_FILE_DOWNLOADED'), (4, 'SUCCESS'), (5, 'FAILED')], default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('failure_message', models.TextField()),
                ('filename', models.TextField()),
                ('input_json', jsonfield.fields.JSONField(blank=True, null=True)),
                ('output_json', jsonfield.fields.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upload_file_jobs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ModelScoreChange',
            fields=[
                ('forecast_model', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='score_change', serialize=False, to='forecast_app.ForecastModel')),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RowCountCache',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='row_count_cache', serialize=False, to='forecast_app.Project')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('row_count', models.IntegerField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScoreCsvFileCache',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='score_csv_file_cache', serialize=False, to='forecast_app.Project')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='timezero',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timezeros', to='forecast_app.Project'),
        ),
        migrations.AddField(
            model_name='target',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='forecast_app.Project'),
        ),
        migrations.AddField(
            model_name='scorevalue',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Target'),
        ),
        migrations.AddField(
            model_name='scorelastupdate',
            name='forecast_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecast_app.ForecastModel'),
        ),
        migrations.AddField(
            model_name='scorelastupdate',
            name='score',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Score'),
        ),
        migrations.AddField(
            model_name='sampledistribution',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Target'),
        ),
        migrations.AddField(
            model_name='project',
            name='model_owners',
            field=models.ManyToManyField(blank=True, help_text='Users who are allowed to create, edit, and delete ForecastModels in this project. Or: non-editing users who simply need access to a private project. Use control/command click to add/remove from the list. ', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, help_text="The project's owner.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pointprediction',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Target'),
        ),
        migrations.AddField(
            model_name='nameddistribution',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Target'),
        ),
        migrations.AddField(
            model_name='location',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='forecast_app.Project'),
        ),
        migrations.AddField(
            model_name='forecastmodel',
            name='owner',
            field=models.ForeignKey(blank=True, help_text="The model's owner.", null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='forecastmodel',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='forecast_app.Project'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='forecast_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forecasts', to='forecast_app.ForecastModel'),
        ),
        migrations.AddField(
            model_name='forecast',
            name='time_zero',
            field=models.ForeignKey(help_text='TimeZero that this forecast is in relation to.', on_delete=django.db.models.deletion.CASCADE, to='forecast_app.TimeZero'),
        ),
        migrations.AddField(
            model_name='bindistribution',
            name='forecast',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='forecast_app.Forecast'),
        ),
        migrations.AddField(
            model_name='bindistribution',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Location'),
        ),
        migrations.AddField(
            model_name='bindistribution',
            name='target',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='forecast_app.Target'),
        ),
    ]
